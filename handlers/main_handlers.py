from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram import Router
from filters import CommandOrTextFilter
from keyboards import keyboards as kb
from user_functions import database_functions as db
from states import CheckStates

from admin_functions import database_functions

import os
from dotenv import load_dotenv

load_dotenv()

admin_whitelist = int(os.getenv("ADMIN_WHITELIST"))

router = Router()


@router.message(Command('start'))
async def start_command(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! üëã\n'
                         '–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìä.\n'
                         '–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, –∫—Ç–æ –∏ –∫–æ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω ‚è∞.\n\n'
                         '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî /help üìö.\n\n'
                         '–ò –¥–∞, –µ—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–µ–Ω—è ‚Äî –∑–Ω–∞—á–∏—Ç, —Ç—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç–∞–ª–∫–µ—Ä! üòéüëÄ', reply_markup=kb.help_kb)


@router.message(CommandOrTextFilter(command='help', text_contains='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüë©‚Äçüíª'))
async def start_command(message: Message):
    await message.answer('üîç –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ 5 —Å–µ–∞–Ω—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n'
                         '‚ö†Ô∏è –£—á—Ç–∏: –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫—Ä—ã—Ç –æ–Ω–ª–∞–π–Ω, —Ç–æ —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.\n\n'
                         'üìé –û—Ç–ø—Ä–∞–≤–ª—è–π –∫–∞–∫ —é–∑–µ—Ä–Ω–µ–π–º—ã, —Ç–∞–∫ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n'
                         '‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –∂–º–∏ /support!', reply_markup=kb.main_kb_1)


@router.message(CommandOrTextFilter(command='back', text_contains='–ù–∞–∑–∞–¥'))
async def back_command(message: Message, state: FSMContext):
    await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å...', reply_markup=kb.main_kb_1)
    await state.clear()


@router.message(Command('support'))
async def support_command(message: Message):
    await message.answer('–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ —Ç–æ –ø—Ä–æ–±–ª–µ–º—ã - @Fe4ester')


@router.message(Command('admin'))
async def admin_command(message: Message, state: FSMContext):
    if message.from_user.id != admin_whitelist:
        return

    users = await db.get_all_current_users()

    if not users:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        await state.update_data(users=users)

        user_list = "\n".join([f"{idx + 1}. {user[0]}" for idx, user in enumerate(users)])
        await message.answer(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{user_list}")
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb.back_kb)
#
#         await state.set_state(CheckStates.delete)
#
#
# @router.message(CheckStates.delete)
# async def delete_user_by_number(message: Message, state: FSMContext):
#     if not message.text.isdigit():
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
#         await state.clear()
#         return
#
#     data = await state.get_data()
#     users = data.get('users')
#
#     user_number = int(message.text)
#
#     if user_number < 1 or user_number > len(users):
#         await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
#         return
#
#     user_to_delete = users[user_number - 1][0]
#
#     await db.delete_id_admin(user_to_delete)
#
#     await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_delete} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb.main_kb_1)
#
#     await state.clear()
#
#
# @router.message(Command('whitelist'))
# async def whitelist_command(message: Message):
#     if message.from_user.id != admin_whitelist:
#         return
#
#     users = await database_functions.get_whitelist_users()
#
#     if users:
#         user_list = "\n".join([f"{idx + 1}. {user}" for idx, user in enumerate(users)])
#         await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ whitelist:\n{user_list}")
#     else:
#         await message.answer("Whitelist –ø—É—Å—Ç")
#
#
# @router.message(Command('whitelist_add'))
# async def whitelist_add_command(message: Message):
#     if message.from_user.id != admin_whitelist:
#         return
#
#     args = message.text.split()
#     if len(args) == 2:
#         try:
#             target_user_id = int(args[1])
#
#             added = await database_functions.add_user_to_whitelist(target_user_id)
#             if added:
#                 await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ whitelist")
#             else:
#                 await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ whitelist")
#         except ValueError:
#             await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /whitelist_add <user_id>")
#     else:
#         await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /whitelist_add <user_id>")
#
#
# @router.message(Command('whitelist_remove'))
# async def whitelist_remove_command(message: Message):
#     if message.from_user.id != admin_whitelist:
#         return
#
#     args = message.text.split()
#     if len(args) == 2:
#         try:
#             target_user_id = int(args[1])
#
#             removed = await database_functions.remove_user_from_whitelist(target_user_id)
#             if removed:
#                 await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ whitelist")
#             else:
#                 await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ whitelist")
#         except ValueError:
#             await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /whitelist_remove <user_id>")
#     else:
#         await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /whitelist_remove <user_id>")
